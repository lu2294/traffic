// import L from 'leaflet'

import React, { Component } from 'react'
import { Button } from 'antd'
import {toJS} from "mobx"
import { Map, ZoomControl, TileLayer } from 'react-leaflet'
import {react_geoengine_gl} from "gas.gl";
import "./index.scss"

import { observer, inject } from "mobx-react"
// const { default: ReactGeoEngine, HttpDatasource, resource, MemoryDatasource } = react_geoengine
const PolygonLayerGL = react_geoengine_gl.PolygonLayerGL
@inject("map")
class MapIndex extends Component {

  constructor(props) {

    super(props)
    this.state = {
      map:null
    }
    // this.map =  null
  }
  splitLatlng = (poi)=>{
    const item = poi.split(',')
    if (item.length >= 2) {
      const arr = [parseFloat(item[0]), parseFloat(item[1])]
      return arr
    }
    return false
  }
  returnPoint(pathPois){
    let dataObj = {
      type: 'FeatureCollection',
      features: []
    };
    let fitBoundsData = [];
    let splitArea = toJS(pathPois).split(';');
    splitArea.map((splitBound, index) => {
      let feature = {
        type: 'Feature',
        properties: {
          name: ''
        },
        geometry: {
          type: 'Polygon',
          coordinates: [
            []
          ]
        }
      };
      let newPois = toJS(splitBound).split('#');
      for (let i = 0; i < newPois.length; i++) {
        if (this.splitLatlng(newPois[i])) {
          feature.geometry.coordinates[0].push(this.splitLatlng(newPois[i]));
          fitBoundsData.push(this.splitLatlng(newPois[i]).reverse())
        }
        if (i === newPois.length - 1) {
          feature.geometry.coordinates[0].push(this.splitLatlng(newPois[0]))
        }
      }
      dataObj.features.push(feature)
    })
    return dataObj
  }
  componentDidMount() {
    this.refs.map.leafletElement && (this.setState({map:this.refs.map.leafletElement}) )
  }
  renderCirleArea = ()=>{
    let styleOptionHot = {
      filled: false,
      stroked: true,
      setLineColor: [255,250,250],
      setFillColor: [255,250,250],
      setLineWidth: 20
    }
    let ds = '121.478226,31.188741#121.475398,31.188008#121.474775,31.190237#121.472656,31.190730#121.471124,31.190896#121.470652,31.191018#121.470413,31.191169#121.470332,31.191251#121.470070,31.193045#121.469849,31.194704#121.469841,31.194741#121.469559,31.196518#121.469083,31.197480#121.469062,31.197521#121.468428,31.198966#121.468421,31.198985#121.468294,31.199383#121.467925,31.201179#121.467918,31.201210#121.467722,31.201896#121.467369,31.203037#121.466627,31.204342#121.465868,31.203947#121.464248,31.203369#121.463451,31.203204#121.462243,31.202968#121.462269,31.203173#121.462246,31.203329#121.462244,31.203509#121.462247,31.204239#121.462246,31.204310#121.462242,31.204535#121.462236,31.204656#121.462212,31.204858#121.462212,31.204870#121.462194,31.205019#121.462191,31.205042#121.462168,31.205246#121.462167,31.205255#121.462165,31.205271#121.462164,31.205279#121.462144,31.205449#121.462100,31.205835#121.462015,31.206511#121.462002,31.206631#121.461854,31.207795#121.461845,31.207879#121.461828,31.208004#121.461803,31.208195#121.461765,31.208481#121.461739,31.208682#121.461549,31.210192#121.461489,31.210499#121.461466,31.210622#121.461426,31.210847#121.461421,31.210870#121.461391,31.211036#121.461284,31.211453#121.461233,31.211638#121.461230,31.211716#121.460893,31.212878#121.460701,31.213484#121.460553,31.213767#121.460508,31.213853#121.460430,31.214004#121.460088,31.214674#121.459812,31.215155#121.459570,31.215626#121.459473,31.215814#121.459424,31.215919#121.459414,31.215958#121.459409,31.215986#121.459400,31.216060#121.459379,31.216165#121.459346,31.216254#121.459217,31.216557#121.459097,31.216784#121.459065,31.216844#121.458993,31.216985#121.458730,31.217501#121.458647,31.217664#121.458584,31.217796#121.458532,31.217906#121.458302,31.218388#121.458247,31.218531#121.458204,31.218683#121.458145,31.218859#121.458071,31.219073#121.457997,31.219293#121.457879,31.219646#121.457688,31.220189#121.457622,31.220357#121.457341,31.221073#121.457170,31.221301#121.456952,31.221735#121.456896,31.221918#121.456873,31.222123#121.456857,31.222264#121.456836,31.222496#121.456820,31.222891#121.456824,31.223194#121.456826,31.223301#121.456830,31.223524#121.456823,31.223619#121.456815,31.223723#121.456803,31.223757#121.456782,31.223774#121.456789,31.223799#121.456770,31.223855#121.456762,31.223870#121.456756,31.223898#121.460862,31.223944#121.460881,31.223944#121.463278,31.223964#121.463331,31.223965#121.466374,31.223795#121.467490,31.223869#121.467488,31.224013#121.467487,31.224074#121.467487,31.224096#121.467486,31.224163#121.467486,31.224213#121.467489,31.224257#121.467510,31.224488#121.467609,31.225454#121.467630,31.225662#121.467657,31.225633#121.467906,31.225688#121.467914,31.225713#121.467499,31.226512#121.467229,31.227561#121.467112,31.229246#121.466979,31.230907#121.466974,31.230953#121.466617,31.232897#121.466604,31.232970#121.466225,31.234641#121.465854,31.235502#121.465112,31.236722#121.465107,31.236730#121.464329,31.238197#121.464252,31.238378#121.464231,31.238427#121.464044,31.238866#121.462990,31.241374#121.463818,31.241382#121.464599,31.241281#121.465978,31.240837#121.466219,31.240747#121.467494,31.240058#121.467505,31.240052#121.468532,31.239479#121.469481,31.239257#121.470337,31.239304#121.470768,31.239447#121.472232,31.240182#121.473298,31.240854#121.474150,31.241266#121.474862,31.241448#121.475769,31.241491#121.476540,31.241402#121.476546,31.241401#121.477281,31.241158#121.478892,31.240328#121.479399,31.240171#121.479975,31.240116#121.480862,31.240275#121.480962,31.240319#121.480975,31.240319#121.481396,31.240544#121.481835,31.240903#121.483000,31.241978#121.483014,31.241991#121.483625,31.242607#121.484431,31.243296#121.484446,31.243307#121.484454,31.243312#121.485058,31.243701#121.485755,31.244015#121.485766,31.244017#121.486793,31.244244#121.487775,31.244204#121.489208,31.243713#121.490216,31.243375#121.491675,31.242935#121.494907,31.242365#121.494507,31.241928#121.493846,31.240974#121.493388,31.239935#121.493214,31.239242#121.493109,31.238287#121.493128,31.237730#121.493334,31.236630#121.493541,31.236048#121.494048,31.235079#121.494386,31.234604#121.494999,31.233988#121.496211,31.232819#121.497853,31.231650#121.499993,31.229988#121.501876,31.228358#121.503893,31.226404#121.504085,31.226210#121.506476,31.223625#121.506675,31.223381#121.507218,31.222668#121.507758,31.221872#121.508237,31.221074#121.508600,31.220395#121.509131,31.219227#121.509601,31.217910#121.509917,31.216720#121.510038,31.216118#121.510076,31.215900#121.510138,31.215499#121.510149,31.215066#121.510145,31.214996#121.510033,31.214104#121.509902,31.213705#121.509757,31.213379#121.509053,31.211796#121.508359,31.210719#121.507356,31.208991#121.506838,31.208123#121.506257,31.207168#121.505237,31.205492#121.501797,31.200322#121.500644,31.198603#121.499418,31.197148#121.498033,31.195638#121.496002,31.193652#121.492537,31.191955#121.489526,31.191066#121.485395,31.190375#121.480951,31.189421#121.480874,31.189404#121.479406,31.189089#121.478226,31.188741'
    let dataObj = this.returnPoint(ds)
    console.log(dataObj,2222)
    return (
      <PolygonLayerGL
        {...styleOptionHot}
        key='CirleArea'          
        map={this.state.map}
        data={dataObj}
          redraw               
          rounded
          fp64={false}
          lineJointRounded
          opacity={0.9}
          zIndex={8}
          lineWidthMinPixels={4}
      />
    )
  }
  render() {
    const {tileUrl,zoom} = this.props.map
   console.log(this.map,66666)
    return (<div>

      <Map
      
      className='roadCrossingMap'
      ref={'map'}
      // style={{height: '100%', width: '100%'}}
      center={[30.27, 120.15]}
      maxZoom={23}
      minZoom={2}
      zoomControl={false}
      zoomAnimationThreshold = {1}
      zoom={zoom}>
      <TileLayer
        key={".TileLayer2"}
        url={tileUrl}
        subdomains={['3']}
      />
      {/* {this.state.map ?this.renderCirleArea(): null} */}
    </Map>
</div>
   )
  }
}
export default MapIndex